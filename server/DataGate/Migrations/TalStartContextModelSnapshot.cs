// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using DataGate.Models;

#nullable disable

namespace DataGate.Migrations
{
    [DbContext(typeof(DataGateContext))]
    partial class DataGateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataGate.Models.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("DataGate.Models.Pipeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DestinationDatasetId")
                        .HasColumnType("integer");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SourceDatasetId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DestinationDatasetId");

                    b.HasIndex("SourceDatasetId");

                    b.HasIndex("Username");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("DataGate.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataGate.Models.Dataset", b =>
                {
                    b.HasOne("DataGate.Models.User", "User")
                        .WithMany("ListOfDataSets")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataGate.Models.Pipeline", b =>
                {
                    b.HasOne("DataGate.Models.Dataset", "DestinationDataset")
                        .WithMany()
                        .HasForeignKey("DestinationDatasetId");

                    b.HasOne("DataGate.Models.Dataset", "SourceDataset")
                        .WithMany()
                        .HasForeignKey("SourceDatasetId");

                    b.HasOne("DataGate.Models.User", "User")
                        .WithMany("ListOfPipelines")
                        .HasForeignKey("Username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationDataset");

                    b.Navigation("SourceDataset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataGate.Models.User", b =>
                {
                    b.Navigation("ListOfDataSets");

                    b.Navigation("ListOfPipelines");
                });
#pragma warning restore 612, 618
        }
    }
}
